
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  00000316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c40  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9b  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e6       	ldi	r30, 0x6E	; 110
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a9 31       	cpi	r26, 0x19	; 25
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  ea:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
	
}
void adc_init(){
	
	
	ADMUX |= (0<<REFS0)|(1<<REFS1); //Referencia a VCC
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
	ADMUX |=(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0); //Canal 0 del uC
  fc:	80 81       	ld	r24, Z
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
	
	ADCSRA|=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE); //Conversion habilitada, iniciada, autotrigered y interrupcion habilitada
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 6e       	ori	r24, 0xE8	; 232
 10a:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler de 128
 10c:	80 81       	ld	r24, Z
 10e:	87 60       	ori	r24, 0x07	; 7
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <usart_init>:
	//ADMUX |=(1<<ADLAR);
}

void usart_init(){
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry
 114:	e1 ec       	ldi	r30, 0xC1	; 193
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
 11e:	a2 ec       	ldi	r26, 0xC2	; 194
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	86 60       	ori	r24, 0x06	; 6
 126:	8c 93       	st	X, r24
	UCSR0C &=~((1<<UPM00)|(1<<UPM01)|(1<<USBS0)); //No Parity, 1 bit stop
 128:	8c 91       	ld	r24, X
 12a:	87 7c       	andi	r24, 0xC7	; 199
 12c:	8c 93       	st	X, r24
	
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 12e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 132:	87 e6       	ldi	r24, 0x67	; 103
 134:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <main>:



int main(void)
{
	cli();
 140:	f8 94       	cli
	usart_init();
 142:	0e 94 8a 00 	call	0x114	; 0x114 <usart_init>
    adc_init();
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	sei();
 14a:	78 94       	sei
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0xc>

0000014e <USART_send>:
}

void USART_send( unsigned char data){
	
	//verifica si el buffer de Tx esta disponible para nueva data
	while(!(UCSR0A & (1<<UDRE0)));
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	95 ff       	sbrs	r25, 5
 156:	fd cf       	rjmp	.-6      	; 0x152 <USART_send+0x4>
	UDR0 = data;
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 15c:	08 95       	ret

0000015e <USART_putstring>:
	
}

void USART_putstring(char *StringPtr){
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 164:	88 81       	ld	r24, Y
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <USART_putstring+0x18>
 16a:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 16c:	0e 94 a7 00 	call	0x14e	; 0x14e <USART_send>
	
}

void USART_putstring(char *StringPtr){
	
	while(*StringPtr != 0x00){
 170:	89 91       	ld	r24, Y+
 172:	81 11       	cpse	r24, r1
 174:	fb cf       	rjmp	.-10     	; 0x16c <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <__vector_21>:
    while (1) 
    {
    }
}

ISR(ADC_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	
	
	uint16_t adc=ADCW; 
 1a2:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1a6:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	USART_putstring("Leyendo Canal 1 ");
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 af 00 	call	0x15e	; 0x15e <USART_putstring>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1b2:	4a e0       	ldi	r20, 0x0A	; 10
 1b4:	64 e1       	ldi	r22, 0x14	; 20
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 00 01 	call	0x200	; 0x200 <__itoa_ncheck>
	itoa(adc,bufferadc, 10);
	USART_putstring(bufferadc);
 1be:	84 e1       	ldi	r24, 0x14	; 20
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 af 00 	call	0x15e	; 0x15e <USART_putstring>
	USART_putstring("\r\n");
 1c6:	81 e1       	ldi	r24, 0x11	; 17
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 af 00 	call	0x15e	; 0x15e <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9c e9       	ldi	r25, 0x9C	; 156
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <__vector_21+0x56>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <__vector_21+0x5c>
 1d8:	00 00       	nop
	//USART_putstring(adc);
	//USART_putstring("\r\n");

	
	
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__itoa_ncheck>:
 200:	bb 27       	eor	r27, r27
 202:	4a 30       	cpi	r20, 0x0A	; 10
 204:	31 f4       	brne	.+12     	; 0x212 <__itoa_ncheck+0x12>
 206:	99 23       	and	r25, r25
 208:	22 f4       	brpl	.+8      	; 0x212 <__itoa_ncheck+0x12>
 20a:	bd e2       	ldi	r27, 0x2D	; 45
 20c:	90 95       	com	r25
 20e:	81 95       	neg	r24
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	0c 94 0c 01 	jmp	0x218	; 0x218 <__utoa_common>

00000216 <__utoa_ncheck>:
 216:	bb 27       	eor	r27, r27

00000218 <__utoa_common>:
 218:	fb 01       	movw	r30, r22
 21a:	55 27       	eor	r21, r21
 21c:	aa 27       	eor	r26, r26
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	a4 17       	cp	r26, r20
 226:	10 f0       	brcs	.+4      	; 0x22c <__utoa_common+0x14>
 228:	a4 1b       	sub	r26, r20
 22a:	83 95       	inc	r24
 22c:	50 51       	subi	r21, 0x10	; 16
 22e:	b9 f7       	brne	.-18     	; 0x21e <__utoa_common+0x6>
 230:	a0 5d       	subi	r26, 0xD0	; 208
 232:	aa 33       	cpi	r26, 0x3A	; 58
 234:	08 f0       	brcs	.+2      	; 0x238 <__utoa_common+0x20>
 236:	a9 5d       	subi	r26, 0xD9	; 217
 238:	a1 93       	st	Z+, r26
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	79 f7       	brne	.-34     	; 0x21c <__utoa_common+0x4>
 23e:	b1 11       	cpse	r27, r1
 240:	b1 93       	st	Z+, r27
 242:	11 92       	st	Z+, r1
 244:	cb 01       	movw	r24, r22
 246:	0c 94 25 01 	jmp	0x24a	; 0x24a <strrev>

0000024a <strrev>:
 24a:	dc 01       	movw	r26, r24
 24c:	fc 01       	movw	r30, r24
 24e:	67 2f       	mov	r22, r23
 250:	71 91       	ld	r23, Z+
 252:	77 23       	and	r23, r23
 254:	e1 f7       	brne	.-8      	; 0x24e <strrev+0x4>
 256:	32 97       	sbiw	r30, 0x02	; 2
 258:	04 c0       	rjmp	.+8      	; 0x262 <strrev+0x18>
 25a:	7c 91       	ld	r23, X
 25c:	6d 93       	st	X+, r22
 25e:	70 83       	st	Z, r23
 260:	62 91       	ld	r22, -Z
 262:	ae 17       	cp	r26, r30
 264:	bf 07       	cpc	r27, r31
 266:	c8 f3       	brcs	.-14     	; 0x25a <strrev+0x10>
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
