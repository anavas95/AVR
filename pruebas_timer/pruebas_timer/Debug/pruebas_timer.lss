
pruebas_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080012a  0080012a  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac2  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000391  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014c  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e0       	ldi	r30, 0x04	; 4
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 32       	cpi	r26, 0x2A	; 42
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e2       	ldi	r26, 0x2A	; 42
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 32       	cpi	r26, 0x2B	; 43
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  ea:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_send>:
}

void USART_send( unsigned char data){
	
	//verifica si el buffer de Tx esta disponible para nueva data
	while(!(UCSR0A & (1<<UDRE0)));
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <USART_send+0x4>
	UDR0 = data;
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <USART_putstring>:
	
}

void USART_putstring(char *StringPtr){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <USART_putstring+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_send>
	
}

void USART_putstring(char *StringPtr){
	
	while(*StringPtr != 0x00){
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <config_timer1>:

void config_timer1(){
	
	cli();
 120:	f8 94       	cli
	TCCR1B |=(1<<CS12)|(0<<CS11)|(1<<CS10);
 122:	e1 e8       	ldi	r30, 0x81	; 129
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	85 60       	ori	r24, 0x05	; 5
 12a:	80 83       	st	Z, r24
	TIMSK1 |=(1<<TOIE1);
 12c:	ef e6       	ldi	r30, 0x6F	; 111
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
	
	TCNT1 =57724;
 136:	8c e7       	ldi	r24, 0x7C	; 124
 138:	91 ee       	ldi	r25, 0xE1	; 225
 13a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 13e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	sei();
 142:	78 94       	sei
 144:	08 95       	ret

00000146 <usart_init>:
	
}
void usart_init(){
	
	 UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry
 146:	e1 ec       	ldi	r30, 0xC1	; 193
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 61       	ori	r24, 0x18	; 24
 14e:	80 83       	st	Z, r24
	 UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
 150:	a2 ec       	ldi	r26, 0xC2	; 194
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	8c 91       	ld	r24, X
 156:	86 60       	ori	r24, 0x06	; 6
 158:	8c 93       	st	X, r24
	 UCSR0C &=~((1<<UPM00)|(1<<UPM01)|(1<<USBS0)); //No Parity, 1 bit stop
 15a:	8c 91       	ld	r24, X
 15c:	87 7c       	andi	r24, 0xC7	; 199
 15e:	8c 93       	st	X, r24
	 
	 UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 160:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 164:	87 e6       	ldi	r24, 0x67	; 103
 166:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	 UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <setup_register>:
	
}
void setup_register(){
	
	
	DDRB |=(1<<DDB5);
 172:	25 9a       	sbi	0x04, 5	; 4
	PORTB &=~(1<<PORTB5);
 174:	2d 98       	cbi	0x05, 5	; 5
 176:	08 95       	ret

00000178 <main>:
void usart_init(void);

 
int main(void)
{
	usart_init();
 178:	0e 94 a3 00 	call	0x146	; 0x146 <usart_init>
	config_timer1();
 17c:	0e 94 90 00 	call	0x120	; 0x120 <config_timer1>
    setup_register();
 180:	0e 94 b9 00 	call	0x172	; 0x172 <setup_register>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0xc>

00000186 <__vector_13>:
	DDRB |=(1<<DDB5);
	PORTB &=~(1<<PORTB5);
	
}

ISR(TIMER1_OVF_vect){
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	
	 if(tiempo == 4){
 1a8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <__vector_13+0x32>
			
			//tiempo = 0;
			//PORTB ^=(1<<PORTB5);
			USART_putstring("Firmware Supra Navas\r\n");
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
			 }
			 
	 if (tiempo==6)
 1b8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1bc:	86 30       	cpi	r24, 0x06	; 6
 1be:	51 f4       	brne	.+20     	; 0x1d4 <__vector_13+0x4e>
	 {
		 tiempo=0;
 1c0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
		 PORTB ^= (1<<PORTB5);
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	89 27       	eor	r24, r25
 1ca:	85 b9       	out	0x05, r24	; 5
		 USART_putstring("soy la mera tos\r\n"); 
 1cc:	87 e1       	ldi	r24, 0x17	; 23
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	 }
	tiempo++;
 1d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
