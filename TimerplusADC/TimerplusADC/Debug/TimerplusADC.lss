
TimerplusADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800114  00800114  00000472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c77  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a61  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b3  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ec       	ldi	r30, 0xCA	; 202
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 32       	cpi	r26, 0x24	; 36
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  ea:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_send>:
}

void USART_send( unsigned char data){
	
	//verifica si el buffer de Tx esta disponible para nueva data
	while(!(UCSR0A & (1<<UDRE0)));
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <USART_send+0x4>
	UDR0 = data;
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <USART_putstring>:
	
}

void USART_putstring(char *StringPtr){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <USART_putstring+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_send>
	
}

void USART_putstring(char *StringPtr){
	
	while(*StringPtr != 0x00){
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <config_timer1>:

void config_timer1(){
	
	SETBIT(TCCR1B, CS12);
 120:	e1 e8       	ldi	r30, 0x81	; 129
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	84 60       	ori	r24, 0x04	; 4
 128:	80 83       	st	Z, r24
	CLEARBIT(TCCR1B,CS11);
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
	CLEARBIT(TCCR1B, CS10);
 130:	80 81       	ld	r24, Z
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	80 83       	st	Z, r24
	//TCCR1B |=(1<<CS12)|(0<<CS11)|(0<<CS10);
	SETBIT(TIMSK1, TOIE1);
 136:	ef e6       	ldi	r30, 0x6F	; 111
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
	//TIMSK1 |=(1<<TOIE1);
	
	TCNT1 =34286;  //Cada segundo
 140:	8e ee       	ldi	r24, 0xEE	; 238
 142:	95 e8       	ldi	r25, 0x85	; 133
 144:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 148:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 14c:	08 95       	ret

0000014e <usart_init>:
	
	
}
void usart_init(){
	
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 61       	ori	r24, 0x18	; 24
 156:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
 158:	a2 ec       	ldi	r26, 0xC2	; 194
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	8c 91       	ld	r24, X
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	8c 93       	st	X, r24
	UCSR0C &=~((1<<UPM00)|(1<<UPM01)|(1<<USBS0)); //No Parity, 1 bit stop
 162:	8c 91       	ld	r24, X
 164:	87 7c       	andi	r24, 0xC7	; 199
 166:	8c 93       	st	X, r24
	
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 168:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 16c:	87 e6       	ldi	r24, 0x67	; 103
 16e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
 172:	80 81       	ld	r24, Z
 174:	80 68       	ori	r24, 0x80	; 128
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <setup_register>:
	
}
void setup_register(){
	
	SETBIT(DDRB,DDB5);
 17a:	25 9a       	sbi	0x04, 5	; 4
	//DDRB |=(1<<DDB5);
	CLEARBIT(PORTB, PORTB5);
 17c:	2d 98       	cbi	0x05, 5	; 5
 17e:	08 95       	ret

00000180 <adc_init>:
	
}

void adc_init(){
	
	  SETBIT(ADMUX, REFS0);
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
	  CLEARBIT(ADMUX, REFS1);
 18a:	80 81       	ld	r24, Z
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	80 83       	st	Z, r24
	  //ADMUX |= (1<<REFS0)|(0<<REFS1); //Referencia a VCC
	  
	  CLEARBIT(ADMUX, MUX3);
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
	  CLEARBIT(ADMUX, MUX2);
 196:	80 81       	ld	r24, Z
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	80 83       	st	Z, r24
	  CLEARBIT(ADMUX, MUX1);
 19c:	80 81       	ld	r24, Z
 19e:	8d 7f       	andi	r24, 0xFD	; 253
 1a0:	80 83       	st	Z, r24
	  SETBIT(ADMUX, MUX0);
 1a2:	80 81       	ld	r24, Z
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	80 83       	st	Z, r24
	  //ADMUX |=(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0); //Canal 0 del uC
	 
	 SETBIT(ADCSRA,ADEN);
 1a8:	ea e7       	ldi	r30, 0x7A	; 122
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	80 83       	st	Z, r24
	 SETBIT(ADCSRA, ADSC);
 1b2:	80 81       	ld	r24, Z
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 83       	st	Z, r24
	 SETBIT(ADCSRA, ADATE);
 1b8:	80 81       	ld	r24, Z
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	80 83       	st	Z, r24
	 SETBIT(ADCSRA,ADPS2);
 1be:	80 81       	ld	r24, Z
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
	 SETBIT(ADCSRA, ADPS1);
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24
	 SETBIT(ADCSRA, ADPS0);
 1ca:	80 81       	ld	r24, Z
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <main>:
void adc_init(void);


int main(void)
{
	cli();
 1d2:	f8 94       	cli
	adc_init();
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <adc_init>
	usart_init();
 1d8:	0e 94 a7 00 	call	0x14e	; 0x14e <usart_init>
	config_timer1();
 1dc:	0e 94 90 00 	call	0x120	; 0x120 <config_timer1>
	setup_register();
 1e0:	0e 94 bd 00 	call	0x17a	; 0x17a <setup_register>
	
	sei();
 1e4:	78 94       	sei
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x14>

000001e8 <__vector_13>:
	//ADCSRA|=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE); //Conversion habilitada, iniciada, autotrigered y interrupcion habilitada
	  //ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler de 128
	//ADMUX |=(1<<ADLAR);
}

ISR(TIMER1_OVF_vect){
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	
	if(tiempo == 10){//  Cada 10 segundos 
 20a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tiempo>
 20e:	8a 30       	cpi	r24, 0x0A	; 10
 210:	09 f0       	breq	.+2      	; 0x214 <__vector_13+0x2c>
 212:	8e c0       	rjmp	.+284    	; 0x330 <__vector_13+0x148>
		
		tiempo = 0;  
 214:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <tiempo>
		adc=ADCW;       //lee el valor del canal 1 del ADC
 218:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 21c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 220:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <adc+0x1>
 224:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc>
		//PORTB ^=(1<<PORTB5);
		//USART_putstring("Firmware Supra Navas\r\n");
		USART_putstring("Leyendo Canal 1 ");      
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
		itoa(adc,buffer, 10);
 230:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc>
 234:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <adc+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 238:	4a e0       	ldi	r20, 0x0A	; 10
 23a:	6d e1       	ldi	r22, 0x1D	; 29
 23c:	71 e0       	ldi	r23, 0x01	; 1
 23e:	0e 94 ae 01 	call	0x35c	; 0x35c <__itoa_ncheck>
		USART_putstring(buffer);
 242:	8d e1       	ldi	r24, 0x1D	; 29
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
		USART_putstring("\r\n"); //salto de Linea y carrier return
 24a:	81 e1       	ldi	r24, 0x11	; 17
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
		
		
		if(ADC_READ == 0x01)
 252:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_READ>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	09 f0       	breq	.+2      	; 0x25c <__vector_13+0x74>
 25a:	6a c0       	rjmp	.+212    	; 0x330 <__vector_13+0x148>
		{
			if (ADC_1_READ ==0x01)
 25c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ADC_1_READ>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	59 f5       	brne	.+86     	; 0x2ba <__vector_13+0xd2>
			{  //Como es la primera lectura igualo los valores de las mediciones
				RD_SLA_PRE = RD_SLA_AFT;    
 264:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 268:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 26c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <RD_SLA_PRE+0x1>
 270:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RD_SLA_PRE>
				RD_SLA_AFT=adc;
 274:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc>
 278:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <adc+0x1>
 27c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 280:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
				ADC_1_READ = 0x00; //limpio la bandera 
 284:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ADC_1_READ>
				
				if (RD_SLA_AFT >=196)
 288:	84 3c       	cpi	r24, 0xC4	; 196
 28a:	91 05       	cpc	r25, r1
 28c:	20 f0       	brcs	.+8      	; 0x296 <__vector_13+0xae>
				{
					//Se tiene el carro encendido y esta cargando la bateria
					SLA_12_STATE = 1; 
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
 294:	4d c0       	rjmp	.+154    	; 0x330 <__vector_13+0x148>
				}
				else if ((RD_SLA_AFT >=180)&(RD_SLA_AFT <196))
 296:	9c 01       	movw	r18, r24
 298:	24 5b       	subi	r18, 0xB4	; 180
 29a:	31 09       	sbc	r19, r1
 29c:	20 31       	cpi	r18, 0x10	; 16
 29e:	31 05       	cpc	r19, r1
 2a0:	20 f4       	brcc	.+8      	; 0x2aa <__vector_13+0xc2>
				{
					//El carro esta apagado, y no se esta cargando la bateria
					SLA_12_STATE =2;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
 2a8:	43 c0       	rjmp	.+134    	; 0x330 <__vector_13+0x148>
				}
				else if (RD_SLA_AFT<180)
 2aa:	84 3b       	cpi	r24, 0xB4	; 180
 2ac:	91 05       	cpc	r25, r1
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <__vector_13+0xca>
 2b0:	3f c0       	rjmp	.+126    	; 0x330 <__vector_13+0x148>
				{
					//Carro apagado y Bateria Baja
					SLA_12_STATE = 3;
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
 2b8:	3b c0       	rjmp	.+118    	; 0x330 <__vector_13+0x148>
				}
			}
			else
			{  //Sino se vuelve a realizar la comparacion
				RD_SLA_PRE = RD_SLA_AFT;
 2ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 2be:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 2c2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <RD_SLA_PRE+0x1>
 2c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RD_SLA_PRE>
				RD_SLA_AFT =adc;
 2ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc>
 2ce:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <adc+0x1>
 2d2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 2d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
				
				if (RD_SLA_AFT >=196)
 2da:	84 3c       	cpi	r24, 0xC4	; 196
 2dc:	91 05       	cpc	r25, r1
 2de:	50 f0       	brcs	.+20     	; 0x2f4 <__vector_13+0x10c>
				{
					 if (SLA_12_STATE !=1)
 2e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <SLA_12_STATE>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	21 f1       	breq	.+72     	; 0x330 <__vector_13+0x148>
					 {
						 SLA_CHANGE = 0x01;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <SLA_CHANGE>
						 SLA_12_STATE =1;
 2ee:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
 2f2:	1e c0       	rjmp	.+60     	; 0x330 <__vector_13+0x148>
					 }
				 }
				 else if ((RD_SLA_AFT >=180)&(RD_SLA_AFT<196))
 2f4:	9c 01       	movw	r18, r24
 2f6:	24 5b       	subi	r18, 0xB4	; 180
 2f8:	31 09       	sbc	r19, r1
 2fa:	20 31       	cpi	r18, 0x10	; 16
 2fc:	31 05       	cpc	r19, r1
 2fe:	58 f4       	brcc	.+22     	; 0x316 <__vector_13+0x12e>
				 {
					 if (SLA_12_STATE !=2)
 300:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <SLA_12_STATE>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	a1 f0       	breq	.+40     	; 0x330 <__vector_13+0x148>
					 {
						 SLA_CHANGE = 0x01;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <SLA_CHANGE>
						 SLA_12_STATE =2;
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
 314:	0d c0       	rjmp	.+26     	; 0x330 <__vector_13+0x148>
					 }
				}
				else if (RD_SLA_AFT <180)
 316:	84 3b       	cpi	r24, 0xB4	; 180
 318:	91 05       	cpc	r25, r1
 31a:	50 f4       	brcc	.+20     	; 0x330 <__vector_13+0x148>
				{
					if (SLA_12_STATE !=3)
 31c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <SLA_12_STATE>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	31 f0       	breq	.+12     	; 0x330 <__vector_13+0x148>
					{
						SLA_CHANGE =0x01;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <SLA_CHANGE>
						SLA_12_STATE =3;
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SLA_12_STATE>
					}
				}
			}
		}
	}
	tiempo++;
 330:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tiempo>
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <tiempo>
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__itoa_ncheck>:
 35c:	bb 27       	eor	r27, r27
 35e:	4a 30       	cpi	r20, 0x0A	; 10
 360:	31 f4       	brne	.+12     	; 0x36e <__itoa_ncheck+0x12>
 362:	99 23       	and	r25, r25
 364:	22 f4       	brpl	.+8      	; 0x36e <__itoa_ncheck+0x12>
 366:	bd e2       	ldi	r27, 0x2D	; 45
 368:	90 95       	com	r25
 36a:	81 95       	neg	r24
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	0c 94 ba 01 	jmp	0x374	; 0x374 <__utoa_common>

00000372 <__utoa_ncheck>:
 372:	bb 27       	eor	r27, r27

00000374 <__utoa_common>:
 374:	fb 01       	movw	r30, r22
 376:	55 27       	eor	r21, r21
 378:	aa 27       	eor	r26, r26
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	aa 1f       	adc	r26, r26
 380:	a4 17       	cp	r26, r20
 382:	10 f0       	brcs	.+4      	; 0x388 <__utoa_common+0x14>
 384:	a4 1b       	sub	r26, r20
 386:	83 95       	inc	r24
 388:	50 51       	subi	r21, 0x10	; 16
 38a:	b9 f7       	brne	.-18     	; 0x37a <__utoa_common+0x6>
 38c:	a0 5d       	subi	r26, 0xD0	; 208
 38e:	aa 33       	cpi	r26, 0x3A	; 58
 390:	08 f0       	brcs	.+2      	; 0x394 <__utoa_common+0x20>
 392:	a9 5d       	subi	r26, 0xD9	; 217
 394:	a1 93       	st	Z+, r26
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	79 f7       	brne	.-34     	; 0x378 <__utoa_common+0x4>
 39a:	b1 11       	cpse	r27, r1
 39c:	b1 93       	st	Z+, r27
 39e:	11 92       	st	Z+, r1
 3a0:	cb 01       	movw	r24, r22
 3a2:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <strrev>

000003a6 <strrev>:
 3a6:	dc 01       	movw	r26, r24
 3a8:	fc 01       	movw	r30, r24
 3aa:	67 2f       	mov	r22, r23
 3ac:	71 91       	ld	r23, Z+
 3ae:	77 23       	and	r23, r23
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <strrev+0x4>
 3b2:	32 97       	sbiw	r30, 0x02	; 2
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <strrev+0x18>
 3b6:	7c 91       	ld	r23, X
 3b8:	6d 93       	st	X+, r22
 3ba:	70 83       	st	Z, r23
 3bc:	62 91       	ld	r22, -Z
 3be:	ae 17       	cp	r26, r30
 3c0:	bf 07       	cpc	r27, r31
 3c2:	c8 f3       	brcs	.-14     	; 0x3b6 <strrev+0x10>
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
